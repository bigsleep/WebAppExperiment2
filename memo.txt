-----------------------------------------------------------------
20140527 Logger

data Logger logger a

logger型引数をつけてLoggerを複数付けられるようにする
Application.Eff.Loggerにloggerの型を具体的に書く
log関数などの引数も部分適用したものを定義する
他のLoggerはApplication.Eff.FluentdLoggerとか

----------------------------------------------------------
20140527 認証

認証が必要なAPIと不要なAPIがある
デフォルトの挙動を決めて書き換えられるような感じか
ログを必ず出力するとか

data ApiSetting = ApiSetting
    { authRequired :: Bool
    , logVerbose :: Bool
    , requestValidator :: Request -> Bool
    , responseValidator :: Response -> Bool
    }

defaultApiSetting

data Api a = Api ApiSetting a



----------------------------------------------------------
20140525 やること

Routesのテスト -> DONE
Loggerを直す。ロガー複数ある場合もありえる
IOの例外キャッチ? -> status500
クライアント
JSON API
コントローラー?
warp
OAuth2でログイン


--------------------------------------------------------
20140522 セッションのエラーどうするか

何かエラー用の型を用意するか

エラーの型はインターフェースと一緒にかく?

エラーの型はアプリで共通のほうがいいのか
エラーも色々あるので共通にするのは難しそう
effならあまり気にすることなく色々使えるか

エラーの種類は?

Kvsに接続できなかった
Kvsのタイムアウト
セッション開始時にKvsに保存失敗した
生成したセッションが既に存在した -> 作りなおせばいい?
セッション読み込みで情報がなかった -> セッションタイムアウト?
セッション削除に失敗 -> リトライ? そもそもそのキーが存在しない?

エラーの原因は調査には必要。ログに残す
エラー後の処理の分岐には原因は関係なさそう。リトライする場合などは必要か
Kvsが不調 -> リトライする
Kvsにデータがない -> リトライ不要

エラー型で分岐することはあまりない
existentialなタイプでエラー何でも入れられる型を作ってExcを一つだけ使うとかでいいか
どうせTypeableにはする必要があるのでエラー型で分岐するときはキャストして使えばいい

----------------------------------------------------
20140518 Binary

SerializableはBinaryとかのほうがいいかも
Data.Binary

Strict.ByteStringじゃなくてLazy.ByteStringを使ったほうがいい?

------------------------------------------------------
20140518 設定

Configとか設定用ソースを用意する。
gitignore

-------------------------------------------------------
20140518 セッション

セッションIDをキーにしてユーザー情報などを保存

セッションIDは普通ヘッダにクッキーでつけるっぽい

- セッション開始
セッションIDを生成、Kvsにユーザー情報保存
ヘッダにSet-Cookieをつける

- セッションを読む
セッションIDを受け取って保存してある情報を読む
普通はリクエストのヘッダなどにセッションIDがある
セッション読めなければ403などを返す

- セッションを消す

セッションIDはsha1とかhmacSha1とかで作ればいいか
プレフィックスに適当な文字列とか時刻とか入れる
ssid20140518:0af98adf709a8f0af8d7fa70af78e087fad8f00

時刻はData.Timeのパッケージを使う
Reader LocalTimeとかで

-----------------------------------------------------
20140517 oauth2でログインするだけ
